/*
 * Copyright (c) 2022 xylan.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import io.franzbecker.gradle.lombok.task.DelombokTask

plugins {
    alias libs.plugins.owasp.dependencycheck
    alias libs.plugins.versions
    alias libs.plugins.spotless
    alias libs.plugins.spotless.changelog
    alias libs.plugins.lombok apply false
}

description = "MailSpy :: Root"

wrapper {
    gradleVersion = libs.versions.gradle.get()
}

allprojects {
    group = "org.xylan.mailspy"
    version = "2.0.2-SNAPSHOT"

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: "maven-publish"
    apply plugin: "signing"

    if (file("$projectDir/src/main/java").exists()) {
        apply plugin: "java"

        dependencies {
            implementation libs.snakeyaml
        }

        java {
            withJavadocJar()
            withSourcesJar()
        }

        apply plugin: "checkstyle"
        checkstyle {
            configFile file("$rootDir/config/checkstyle.xml")
            toolVersion = libs.versions.checkstyle.get()
        }

        apply plugin: "pmd"
        pmd {
            ruleSets = []
            ruleSetFiles = files("$rootDir/config/pmd.xml")
            toolVersion = libs.versions.pmd.get()
            consoleOutput = true
        }

        apply plugin: libs.plugins.lombok.get().getPluginId()
        lombok {
            version = libs.versions.lombok.get()
        }

        task delombok(type: DelombokTask) {
            ext.outputDir = file("$buildDir/delombok")
            outputs.dir(outputDir)
            sourceSets.main.java.srcDirs.each { srcDir ->
                inputs.dir(srcDir)
                args(srcDir, "-d", outputDir)
            }
            dependsOn compileJava
        }

        javadoc {
            dependsOn delombok
            source = delombok.outputDir
            failOnError = false
            options.addBooleanOption("Xdoclint:-missing", true)
        }
    }

    tasks.withType(JavaCompile) {
        options.release = 17
        options.compilerArgs << "-Xlint:-processing" << "-Werror"
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    afterEvaluate {
        publishing {
            repositories {
                maven {
                    name = "sonatypeNexus"
                    url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                    credentials(PasswordCredentials)
                }
            }
            publications {
                mailSpy(MavenPublication) {
                    from components.java
                    artifacts = project.ext.artifacts
                    pom {
                        name = project.ext.pomName
                        description = project.ext.pomDescription
                        url = "https://xylan.org"
                        licenses {
                            license {
                                name = "MIT License"
                                url = "https://spdx.org/licenses/MIT.html"
                            }
                        }
                        developers {
                            developer {
                                id = "abelk2"
                                name = "Abel Keszei"
                                email = "keszeiabel@gmail.com"
                            }
                        }
                        scm {
                            connection = "scm:git:git://github.com/xylan-org/mailspy.git"
                            developerConnection = "scm:git:ssh://github.com:xylan-org/mailspy.git"
                            url = "https://github.com/xylan-org/mailspy/tree/master"
                        }
                    }
                }
            }
        }

        signing {
            sign publishing.publications.mailSpy
        }
    }
}

spotless {
    def exclusions = [
        "**/build/**",
        ".gradle/**",
        ".idea/**",
        ".settings/**",
        ".vscode/**",
        "mailspy-frontend/node_modules/**",
        "mailspy-frontend/node/**",
        "mailspy-frontend/package-lock.json"
    ]
    format "licenseHeader", {
        target fileTree(rootDir) {
            include "**/*.gradle", "**/*.java", "**/*.ts", "**/*.tsx", "**/*.js", "**/*.css"
            exclude exclusions
        }
        licenseHeaderFile file("$rootDir/config/license/c_like.txt"), "^(?!(\\/\\*| \\*| \\*\\/)).+"
    }
    format "generic", {
        target fileTree(rootDir) {
            include "**/*.gradle", "**/*.java", "**/*.ts", "**/*.tsx", "**/*.js", "**/*.css", "**/*.json", "**/*.properties", "**/*.yml"
            exclude exclusions
        }
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target fileTree(rootDir) {
            include "**/*.gradle"
            exclude exclusions
        }
        greclipse().configFile(file("$rootDir/config/greclipse.properties"))
    }
    java {
        target fileTree(rootDir) {
            include "**/*.java"
            exclude exclusions
        }
        palantirJavaFormat(libs.versions.palantirformat.get())
    }
}

spotlessChangelog {
    changelogFile "CHANGELOG.md"
    enforceCheck true
    ifFoundBumpBreaking "**BREAKING**"
    ifFoundBumpAdded "### Added"
    forceNextVersion project.findProperty("forceNextVersion") ?: null
    appendDashSnapshotUnless_dashPrelease true
}

dependencyCheck {
    suppressionFile "$rootDir/config/owasp-suppressions.xml"
    analyzers {
        assemblyEnabled = false
    }
}

dependencyUpdates {
    gradleReleaseChannel = "current"
    revision = "release"
}

def isNonStable = { version ->
    def stableKeyword = ["RELEASE", "FINAL", "GA"].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

def getMajorVersion = { version ->
    def match = version =~ /^(\d+)\..*$/
    return match && match[0] ? match[0][1] as int : null
}

def majorVersionUpdate = { candidateVersion, currentVersion ->
    return getMajorVersion(candidateVersion) > getMajorVersion(currentVersion)
}

tasks.named("dependencyUpdates").configure {
    checkForGradleUpdate = true
    outputFormatter = "html"
    outputDir = "$buildDir/reports"
    reportfileName = "dependency-update-report"
    rejectVersionIf {
        majorVersionUpdate(it.candidate.version, it.currentVersion) || isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

check {
    dependsOn spotlessCheck
}

def replaceVersionInFile = { file, newVersion, versionPatterns ->
    def contents = file.getText()
    versionPatterns.each { pattern ->
        def matches = contents =~ pattern
        matches.each { match ->
            contents = contents.replace(match[0], match[1] + newVersion + match[3])
        }
    }
    file.setText(contents)
}

task updateReadmeVersion {
    description = "Updates the version in the README.md file. New version is inferred from the changelog."
    group = "versioning"
    def versionRegex = "\\d+\\.\\d+\\.\\d+"
    doLast {
        replaceVersionInFile(file("README.md"), spotlessChangelog.versionNext, [
            "(\"org\\.xylan\\.mailspy:mailspy-core:)($versionRegex)(\")",
            "(<version>)($versionRegex)(</version>)",
            "(mailspy-app-)($versionRegex)(\\.jar)"
        ])
    }
}

task updateBuildGradleVersion {
    description = "Updates the version in the build.gradle file. New version is inferred from the changelog."
    group = "versioning"
    doLast {
        replaceVersionInFile(file("build.gradle"), spotlessChangelog.versionNext, ["(version = \")(.*)(\")"])
        // same thing in memory
        version = spotlessChangelog.versionNext
    }
}

task versionToFile {
    description = "Outputs the project version to the build/version.txt file."
    group = "versioning"
    doLast {
        file(buildDir).mkdir()
        file("$buildDir/version.txt").text = version
    }
}

task updateBuildVersion {
    description = "Updates the version in build files. New version is inferred from the changelog."
    group = "versioning"
    // see dependency also in mailspy-frontend build
    dependsOn updateBuildGradleVersion
    finalizedBy versionToFile
}

task updateVersion {
    description = "Updates the version in files which contain it. New version is inferred from the changelog."
    group = "versioning"
    dependsOn updateBuildVersion, updateReadmeVersion, changelogBump
}
