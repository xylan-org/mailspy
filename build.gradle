/*
 * Copyright (c) 2022 xylan.org
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
    alias libs.plugins.owasp.dependencycheck
    alias libs.plugins.versions
    alias libs.plugins.jk1.dependencylicensereport
    alias libs.plugins.spotless
}

description = "MailSpy :: Root"

wrapper {
    gradleVersion = libs.versions.gradle.get()
}

allprojects {
    group = "org.xylan.mailspy"
    version = "1.0.0-SNAPSHOT"

    repositories {
        mavenCentral()
    }
}

subprojects {
    if (file("$projectDir/src/main/java").exists()) {
        apply plugin: "checkstyle"
        checkstyle {
            configFile file("$rootDir/config/checkstyle.xml")
            toolVersion = libs.versions.checkstyle.get()
        }

        apply plugin: "pmd"
        pmd {
            ruleSets = []
            ruleSetFiles = files("$rootDir/config/pmd.xml")
            toolVersion = libs.versions.pmd.get()
            consoleOutput = true
        }
    }

    tasks.withType(JavaCompile) {
        options.release = 11
    }
}

spotless {
    def exclusions = [
        "**/build/**",
        ".gradle/**",
        ".idea/**",
        ".settings/**",
        ".vscode/**",
        "**/node_modules/**",
        "mailspy-frontend/package-lock.json"
    ]
    format "licenseHeader", {
        target "**/*.gradle", "**/*.java", "**/*.ts", "**/*.tsx", "**/*.js", "**/*.css"
        targetExclude exclusions
        licenseHeaderFile file("$rootDir/config/license/c_like.txt"), "^(?!(\\/\\*| \\*| \\*\\/)).+"
    }
    format "generic", {
        target "**/*.gradle", "**/*.java", "**/*.ts", "**/*.tsx", "**/*.js", "**/*.css", "**/*.json", "**/*.properties"
        targetExclude exclusions
        trimTrailingWhitespace()
        endWithNewline()
    }
}

dependencyCheck {
    suppressionFile "$rootDir/config/owasp-suppressions.xml"
    scanConfigurations = ["runtimeClasspath", "compileClasspath"]
    analyzers {
        nodeEnabled = false // cannot skip dev deps, see https://github.com/jeremylong/DependencyCheck/issues/2482#issuecomment-603755623
        assemblyEnabled = false
        nodeAudit {
            skipDevDependencies = true
        }
        retirejs {
            enabled = false
        }
    }
}

dependencyUpdates {
    gradleReleaseChannel = "current"
    revision = "release"
}

def isNonStable = { version ->
    def stableKeyword = ["RELEASE", "FINAL", "GA"].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

def getMajorVersion = { version ->
    def match = version =~ /^(\d+)\..*$/
    return match && match[0] ? match[0][1] as int : null
}

def majorVersionUpdate = { candidateVersion, currentVersion ->
    return getMajorVersion(candidateVersion) > getMajorVersion(currentVersion)
}

tasks.named("dependencyUpdates").configure {
    checkForGradleUpdate = true
    outputFormatter = "html"
    outputDir = "$buildDir/reports"
    reportfileName = "dependency-update-report"
    rejectVersionIf {
        majorVersionUpdate(it.candidate.version, it.currentVersion)
            || isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

import com.github.jk1.license.importer.DependencyDataImporter
import com.github.jk1.license.ImportedModuleBundle
import com.github.jk1.license.ImportedModuleData
import groovy.json.JsonSlurper

licenseReport {
    importers = [
        new DependencyDataImporter() {
            @Override
            public String getImporterName() {
                return "NPM dependency licenses report";
            }

            @Override
            public Collection<ImportedModuleBundle> doImport() {
                def report = new JsonSlurper().parse(file("${project(":mailspy-frontend").buildDir}/reports/licenses/licenses.json"));
                def modules = report.collect { key, value ->
                    def versionSeparatorIndex = key.lastIndexOf('@');
                    return new ImportedModuleData(
                        name: key.substring(0, versionSeparatorIndex),
                        version: key.substring(versionSeparatorIndex + 1),
                        projectUrl: value.url ?: value.repository,
                        license: value.licenses
                    );
                }
                return [new ImportedModuleBundle("NPM dependencies", modules)];
            }
        }
    ]
    allowedLicensesFile = file("$projectDir/config/allowed-licenses.json")
    excludeBoms = true
}

generateLicenseReport {
    dependsOn ":mailspy-frontend:frontendLicenses"
}

check {
    dependsOn checkLicense
}
