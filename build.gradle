plugins {
    alias libs.plugins.owasp.dependencycheck
    alias libs.plugins.versions
}

description = "MailSpy :: Root"

wrapper {
    gradleVersion = libs.versions.gradle.get()
}

allprojects {
    group = "org.xylan.mailspy"
    version = "1.0.0-SNAPSHOT"

    repositories {
        mavenCentral()
    }
}

subprojects {
    if (file("$projectDir/src/main/java").exists()) {
        apply plugin: "checkstyle"
        checkstyle {
            configFile file("$rootDir/config/checkstyle.xml")
            toolVersion = libs.versions.checkstyle.get()
        }

        apply plugin: "pmd"
        pmd {
            ruleSets = []
            ruleSetFiles = files("$rootDir/config/pmd.xml")
            toolVersion = libs.versions.pmd.get()
            consoleOutput = true
        }
    }
    tasks.withType(JavaCompile) {
        options.release = 11
    }
}

dependencyCheck {
    suppressionFile "$rootDir/config/owasp-suppressions.xml"
    scanConfigurations = ["runtimeClasspath", "compileClasspath"]
    analyzers {
        nodeEnabled = false // cannot skip dev deps, see https://github.com/jeremylong/DependencyCheck/issues/2482#issuecomment-603755623
        assemblyEnabled = false
        nodeAudit {
            skipDevDependencies = true
        }
        retirejs {
            enabled = false
        }
    }
}

dependencyUpdates {
    gradleReleaseChannel = "current"
    revision = "release"
}

def isNonStable = { version ->
    def stableKeyword = ["RELEASE", "FINAL", "GA"].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

def getMajorVersion = { version ->
    def match = version =~ /^(\d+)\..*$/
    return match && match[0] ? match[0][1] as int : null
}

def majorVersionUpdate = { candidateVersion, currentVersion ->
    return getMajorVersion(candidateVersion) > getMajorVersion(currentVersion)
}

tasks.named("dependencyUpdates").configure {
    checkForGradleUpdate = true
    outputFormatter = "html"
    outputDir = "$buildDir/reports"
    reportfileName = "dependency-update-report"
    rejectVersionIf {
        majorVersionUpdate(it.candidate.version, it.currentVersion)
            || isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}
