/*
 * Copyright (c) 2022 xylan.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
    id "java-library"
    id "maven-publish"
    id "jacoco"
    alias libs.plugins.coditory.integrationtest
}

description = "MailSpy :: Core"

ext {
    pomName = description
    pomDescription = "MailSpy Spring Boot auto-configuration. View your outgoing emails without sending anything."
    artifacts = [jar, sourcesJar, javadocJar]
}

configurations {
    testImplementation.extendsFrom compileOnly
}

dependencies {
    if (project.hasProperty("includeFrontend")) {
        runtimeOnly project(":mailspy-frontend")
    }
    api libs.spring.boot.autoconfigure
    api libs.spring.context.support
    api libs.spring.webmvc
    api libs.spring.messaging
    api libs.spring.websocket
    api libs.slf4j.api
    api libs.subetha
    api libs.apache.commons.io
    api libs.jackson.databind
    compileOnly libs.jakarta.servletapi
    compileOnly libs.jakarta.annotationsapi
    testImplementation libs.testng
    testImplementation libs.mockito.core
    testImplementation libs.mockito.testng
    testImplementation libs.logback.classic
    integrationImplementation libs.spring.boot.test
    integrationImplementation libs.spring.test
    integrationImplementation libs.assertj.core
    integrationImplementation libs.hamcrest
    integrationImplementation libs.jsonpath
}

check {
    dependsOn tasks.withType(Test)
    dependsOn jacocoTestCoverageVerification
}

tasks.withType(Test) {
    useTestNG()
    testLogging {
        events = ["passed", "failed", "skipped"]
        exceptionFormat = "full"
    }
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = libs.versions.jacoco.get()
}

def setJacocoExclusions = { classDirectories ->
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
            "org/xylan/mailspy/core/config/**"
        ])
    }))
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
    afterEvaluate {
        setJacocoExclusions(classDirectories)
    }
}

jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                counter = "BRANCH"
                value = "COVEREDRATIO"
                minimum = 0.8
            }
            limit {
                counter = "METHOD"
                value = "COVEREDRATIO"
                minimum = 0.8
            }
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = 0.8
            }
            limit {
                counter = "INSTRUCTION"
                value = "COVEREDRATIO"
                minimum = 0.8
            }
        }
    }
    afterEvaluate {
        setJacocoExclusions(classDirectories)
    }
}
