/*
 * Copyright (c) 2022 xylan.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
    id "java-library"
    id "maven-publish"
    alias libs.plugins.siouan.frontend
}

import org.siouan.frontendgradleplugin.infrastructure.gradle.RunNpm

description = "MailSpy :: Frontend"

frontend {
    nodeVersion = libs.versions.node.get()
    assembleScript = "run build"
    installScript = "install --no-audit --no-fund"
}

assembleFrontend {
    inputs.files("public", "src", "package.json", "tsconfig.json", "craco.config.js")
    outputs.dir("$buildDir/webpack")
    onlyIf {
        project.findProperty("production") ?: false
    }
}

jar {
    archivesBaseName = "mailspy-frontend"
    from (assembleFrontend) {
        into "META-INF/mailspy-frontend"
    }
    dependsOn assembleFrontend
}

task testFrontend(type: RunNpm) {
    description = "Runs the frontend tests."
    group = "verification"
    script = "test -- --coverage --watchAll=false --coverageDirectory build/reports/coverage"
    dependsOn installFrontend
}

task prettierCheck(type: RunNpm) {
    description = "Runs prettier in check mode."
    group = "verification"
    script = "run prettier-check"
    dependsOn installFrontend
}

task prettierApply(type: RunNpm) {
    description = "Runs prettier in write mode."
    group = "verification"
    script = "run prettier-apply"
    dependsOn installFrontend
}

task eslint(type: RunNpm) {
    description = "Runs ESLint."
    group = "verification"
    script = "run eslint"
    dependsOn installFrontend
}

task frontendDependencyUpdates(type: RunNpm) {
    description = "Checks the latest versions of frontend dependencies."
    group = "verification"
    script = "run versions-check"
    dependsOn installFrontend
}

task updatePackageJsonVersion(type: RunNpm) {
    description = "Updates the version in the package.json file. New version is inferred from the changelog."
    group = "verification"
    script = "version ${rootProject.spotlessChangelog.versionNext}"
}

check {
    dependsOn testFrontend
    dependsOn prettierCheck
    dependsOn eslint
}

rootProject.updateVersion {
    dependsOn updatePackageJsonVersion
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact jar
        }
    }
}
